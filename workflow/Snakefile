from os.path import join
import pandas as pd


configfile: 'config/config.yml'

#load participants.tsv file, and strip off sub- from participant_id column
df = pd.read_table(config['participants_tsv'])
subjects = df.participant_id.to_list() 
subjects = [ s.strip('sub-') for s in subjects ]


#need this to make sure iterations don't go below 0!
wildcard_constraints:
    iteration="[0-9]+"


localrules: all, gen_init_template

rule all:
    input: 'results/iter_{iteration}/template.nii.gz'.format(iteration=config['max_iters'])

rule gen_init_template:
    input: expand(join(config['bids_dir'],config['target_nii']),subject=subjects)
    output: 'results/iter_0/template.nii.gz'
    log: 'logs/gen_init_template.txt'
    envmodules: 'ants'
    shell:
        'AverageImages 3 {output} 1 {input}'

rule reg_to_template:
    input: 
        template = 'results/iter_{iteration}/template.nii.gz',
        target = join(config['bids_dir'],config['target_nii'])
    params:
        out_prefix = 'results/iter_{iteration}/sub-{subject}_iter-{iteration}_'
    output:
        warp = 'results/iter_{iteration}/sub-{subject}_iter-{iteration}_1Warp.nii.gz',
        invwarp = 'results/iter_{iteration}/sub-{subject}_iter-{iteration}_1InverseWarp.nii.gz',
        affine = 'results/iter_{iteration}/sub-{subject}_iter-{iteration}_0GenericAffine.mat',
        warped = 'results/iter_{iteration}/sub-{subject}_iter-{iteration}_WarpedToTemplate.nii.gz'
    log: 'logs/reg_to_template/iter_{iteration}_sub-{subject}.txt'
    threads: 16
    resources:
        mem_mb = 16000, #should try to calculate this based on image size.. 
        time = 60*2 # 2 hrs
    envmodules: 'ants'
    shell:
        'ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS={threads} antsRegistration {config[ants][base_opts]} {config[ants][intensity_opts]} '
        '-r [{input.template},{input.target},1] ' #initialize with image headers
        '-t Rigid[0.1] -m MI[{input.template},{input.target},1,32,Regular,0.25] -c [1000x500x250x0,1e-6,10] -f 6x4x2x1 -s 4x2x1x0 ' # rigid registration
        '-t Affine[0.1] -m MI[{input.template},{input.target},1,32,Regular,0.25] -c [1000x500x250x0,1e-6,10] -f 6x4x2x1 -s 4x2x1x0 ' # affine registration
        '-t {config[ants][transform_model]} -m {config[ants][sim_metric]}[{input.template},{input.target},1,4] '  # deformable registration
        '-c [{config[ants][reg_iterations]},1e-9,10] -f {config[ants][shrink_factors]} -s {config[ants][smoothing_factors]} ' # .. continued
        '-o {params.out_prefix} &> {log}  && '
        'antsApplyTransforms {config[ants][base_opts]} -i {input.target} -o {output.warped} -r {input.template} -t {output.warp} -t {output.affine} &>> {log}'


rule avg_warped:
    input: 
        targets = lambda wildcards: expand('results/iter_{iteration}/sub-{subject}_iter-{iteration}_WarpedToTemplate.nii.gz',subject=subjects,iteration=int(wildcards.iteration)-1),
    output: 'results/iter_{iteration}/shapeupdate/avg_warped.nii.gz'
    group: 'shapeupdate'
    log: 'logs/avg_warped/iter_{iteration}'
    envmodules: 'ants'
    shell:
        'AverageImages 3 {output} 1 {input} &> {log}'
       
rule avg_inverse_warps:
    input:
        warps = lambda wildcards: expand('results/iter_{iteration}/sub-{subject}_iter-{iteration}_1InverseWarp.nii.gz',subject=subjects,iteration=int(wildcards.iteration)-1),
    output: 
        invwarp = 'results/iter_{iteration}/shapeupdate/avg_inverse_warps.nii.gz'
    group: 'shapeupdate'
    log: 'logs/avg_inverse_warps/iter_{iteration}'
    envmodules: 'ants'
    shell:
        'AverageImages 3 {output} 0 {input} &> {log}'
         
rule scale_by_gradient_step:
    input: 'results/iter_{iteration}/shapeupdate/avg_inverse_warps.nii.gz'
    output: 'results/iter_{iteration}/shapeupdate/avg_inverse_warps_scaled.nii.gz'
    group: 'shapeupdate'
    log: 'logs/scale_by_gradient_step/iter_{iteration}'
    envmodules: 'ants'
    shell:
        'MultiplyImages 3 {input} -0.25 {output} &> {log}' 

rule avg_affine_transforms:
    input: 
        affine = lambda wildcards: expand('results/iter_{iteration}/sub-{subject}_iter-{iteration}_0GenericAffine.mat',subject=subjects,iteration=int(wildcards.iteration)-1),
    output:
        affine = 'results/iter_{iteration}/shapeupdate/avg_affine.mat'
    group: 'shapeupdate'
    log: 'logs/avg_affine_transforms/iter_{iteration}'
    envmodules: 'ants'
    shell:
        'AverageAffineTransformNoRigid 3 {output} {input} &> {log}'

rule transform_inverse_warp:
    input:
        affine = 'results/iter_{iteration}/shapeupdate/avg_affine.mat',
        invwarp = 'results/iter_{iteration}/shapeupdate/avg_inverse_warps_scaled.nii.gz',
        ref = 'results/iter_{iteration}/shapeupdate/avg_warped.nii.gz'
    output: 
        invwarp = 'results/iter_{iteration}/shapeupdate/avg_inverse_warps_scaled_transformed.nii.gz'
    group: 'shapeupdate'
    log: 'logs/transform_inverse_warp/iter_{iteration}'
    envmodules: 'ants'
    shell:
        'antsApplyTransforms -d 3 -e vector -i {input.invwarp} -o {output} -t [{input.affine},1] -r {input.ref} --verbose 1 &> {log}'

rule apply_template_update:
    input:
        template =  'results/iter_{iteration}/shapeupdate/avg_warped.nii.gz',
        affine = 'results/iter_{iteration}/shapeupdate/avg_affine.mat',
        invwarp = 'results/iter_{iteration}/shapeupdate/avg_inverse_warps_scaled_transformed.nii.gz'
    output:
        template =  'results/iter_{iteration}/template.nii.gz'
    log: 'logs/apply_template_update/iter_{iteration}'
    group: 'shapeupdate'
    envmodules: 'ants'
    shell:
        'antsApplyTransforms -d 3 --float 1 --verbose 1 -i {input.template} -o {output.template} -t [{input.affine},1] '
        ' -t {input.invwarp} -t {input.invwarp} -t {input.invwarp} -t {input.invwarp} -r {input.template} &> {log}' #apply warp 4 times


